今日计划：

解决：
1、MapLayer为什么一直在change？
2、为什么炸掉墙后，调用了MapLayer.draw，墙依然存在？mapData有问题？

完成炸弹可以炸掉墙。
炸弹可以炸死玩家、敌人。
可放置多个炸弹（5个），炸弹爆炸时会引爆在火力范围内的炸弹







完成内容：


重构Layer族的change方法，并将保护方法P__setStateNoraml、P__setStateChange改成了公有方法setStateNoraml、setStateChange。
将Layer的addElements改名为addSprites。


修改了Observer.js：
方法名改为小写。
subscribe的参数改为：context, fn
publish的参数改为：context, fn, args

MapLayer增加changeSpriteImg方法。

使用观察者模式，在Game中订阅maplayer -> changeSpriteImg方法，然后再BombSprite -> explode中发布。

完成了炸弹可以炸掉墙。











明日计划：

重构BombSprite:
如在__createFire中生成火焰范围的数组（如：[{x: this.x, y：this.y - bomberConfig.HEIGHT}, ...]）。


炸弹可以炸死玩家、敌人。

可放置多个炸弹（5个），炸弹爆炸时会引爆在火力范围内的炸弹。






难点：








已解决的问题及解决方案：

1、MapLayer为什么一直在change？

问题描述

游戏主循环每次轮询都调用MapLayer -> run中的clear和draw（重绘地图）！照理说只应该第一次轮询时调用，后面的轮询就不再调用了啊！

原因分析

因为在Game -> run中调用了layerManager.change()，从而调用了mapLayer.change()。
又因为mapLayer.change()为Layer -> change，所以修改__state为CHANGE状态。所以mapLayer -> run 中的P__isChange()每次轮询都为true了！

解决方案

在mapLayer中覆盖父类的change方法，设为调用setStateNormal：

MapLayer:
...
change: function(){
	this.setStateNormal();
},
...

这样在Game -> run中就不会修改




2、为什么炸掉墙后，调用了MapLayer.draw，墙依然存在？mapData有问题？

问题描述

炸弹人炸弹爆炸后，画面上墙依然存在，但是玩家可以通过该墙了（即地形变为通过了）。


原因分析

最初我以为是没有调用mapLayer.draw。
但是经过排查测试后，发现原因为mapLayer对应的精灵的Img对象没有变为ground！


解决方案

BombSprite -> explode中炸毁墙的判断中，如果要炸掉墙，则修改地图层对应精灵类的img对象为ground对象（调用mapLayer -> changeSpriteImg）。
为了去掉BombSprite与MapLayer的耦合，引入观察者模式解决：
在Game -> init中订阅mapLayer -> changeSpriteImg，在BombSprite -> explode中发布。





已解决但不知道原因的问题：







未解决的问题：








注意事项：










补充说明：






